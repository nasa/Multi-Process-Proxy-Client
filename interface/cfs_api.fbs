include "common.fbs";

namespace cFS_API;

////////////////////////////////////////////////////
// Common
table cFETime {
    Seconds:uint32;
    Subseconds:uint32;
}

////////////////////////////////////////////////////
// ES Functions
table RunLoop {
    ExitStatus:uint32; // A pointer
}

// ES Performance Log API
table PerfLogAdd {
    Marker:uint32;
    EntryExit:uint32;
}

// ES
table RegisterApp { // return int32
    // No arguments
}

table ExitApp { // void return
    ExitStatus:uint32; // Not a pointer
}

////////////////////////////////////////////////////
// EVS Functions
table SendEvent {
    EventID:uint16;
    EventType:uint16;
    Spec:string;
}

table SendEventWithAppID {
    EventID:uint16;
    EventType:uint16;
    AppID:uint32;
    Spec:string;
}

table SendTimedEvent { // return int32
    Time:cFETime;
    EventID:uint16;
    EventType:uint16;
    Spec:string;
}

table Filter {
    EventID:uint16;
    Mask:uint16;
}

table Register {
    Filters:[Filter];
    NumFilteredEvents:uint16;
    FilterScheme:uint16;
}

table Unregister { // return int32
    // no arguments
}

table ResetFilter { // return int32
    EventID:int16;
}

table ResetAllFilters { // return int32
    // no arguments
}

////////////////////////////////////////////////////
// FS Functions

////////////////////////////////////////////////////
// SB Functions are likely all handled by SBN-Client

////////////////////////////////////////////////////
// TIME Functions

////////////////////////////////////////////////////
// TBL Functions

////////////////////////////////////////////////////
union Function {
    // ES Functions
    RunLoop,
    PerfLogAdd,
    RegisterApp,
    ExitApp,

    // EVS Functions
    Register,
    Unregister,
    SendEvent,
    SendEventWithAppID,
    SendTimedEvent,
    ResetFilter,
    ResetAllFilters

    // FS Functions

    // SB Functions are likely all handled by SBN-Client

    // TIME Functions

    // TBL Functions
}

// Unions may not be the root_type (since it is actually two fields)
table RemoteCall {
    input:Function;
}

root_type RemoteCall;
